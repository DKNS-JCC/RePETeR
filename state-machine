#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Encoder.h>
#include <Arduino.h>

#define THERMISTOR_R 10000
#define THERMISTOR_T 25
#define THERMISTOR_B 3950

LiquidCrystal_I2C lcd(0x27, 16, 2);

const int pinA = 2;
const int pinB = 3;
const int Ebutton = 4;
const int thermistor = A0;
const int relay = 6;

Encoder enc(pinA, pinB);

long lastPosition = 0;
int newPosition = 0;

/*****************************************
ESTADOS DE
FUNCIONAMIENTO
0: Espera (revision de temperatura) cambio si se presiona el boton
1: Cambio de temperatura o velocidad cambio si se presiona el boton (confirmacion)
*****************************************/
int state = 0;

int temp = 0;
int lastTemp = 0;
int vel = 0;
int tempObj = 25;
int velObj = 25;

unsigned long tiempoAnterior = 0;
unsigned long interval = 500;
unsigned long currentMillis = 0;

//Crear caracter personalizado
byte degree[] = {
    B00111,
    B00101,
    B00111,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000
};

void setup()
{
    pinMode(Ebutton, INPUT_PULLUP);
    enc.write(0); // Reset
    lcd.init();
    lcd.backlight();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("RePETer");
    lcd.setCursor(0, 1);
    for (int i = 0; i < 16; i++)
    {
        lcd.print((char)255);
        delay(200);
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temperatura");
    lcd.setCursor(0, 1);
    lcd.print(getTemp());
    lcd.setCursor(4, 1);
    lcd.print("/");
    lcd.print(tempObj);
    lcd.print(degree);
}

void loop()
{
    currentMillis = millis();

    if (currentMillis - tiempoAnterior > interval)
    {
        tiempoAnterior = currentMillis;
        temp = getTemp();
        lcd.setCursor(0, 1);
        lcd.print(temp);
        lcd.setCursor(4, 1);
        lcd.print("/");
        lcd.print(tempObj);
        lcd.print(degree);
    }

    newPosition = enc.read();
    if(newPosition - lastPosition > 2)
    {
        switch (state)
        {
            case 0:
                lcd.print ("Temperatura ");
                lcd.print (getTemp());
                lcd.print ("/");
                lcd.print (tempObj);
                lcd.print (degree);
                lcd.setCursor(0, 1);
                lcd.print ("> Velocidad ");
                lcd.print (velObj);
                lcd.print (" %");
                break;
            case 1:
                tempObj ++;
                if (tempObj > 220)
                {
                    tempObj = 220;
                }
                else if(tempObj < 0)
                {
                    tempObj = 0;
                }
                lcd.print ("> Temperatura ");
                lcd.print (getTemp());
                lcd.print ("/");
                lcd.print (tempObj);
                lcd.print (degree);
                break;
            default:
                break;  
        }
    }
    else if(newPosition - lastPosition < -2)
    {
        
    }
}

int getTemp()
{
    int raw = analogRead(thermistor);
    float R = THERMISTOR_R * (1023.0 / raw - 1.0);
    float T = 1.0 / (1.0 / (THERMISTOR_T + 273.15) + 1.0 / THERMISTOR_B * log(R / 10000.0));
    return T - 273.15;
}
